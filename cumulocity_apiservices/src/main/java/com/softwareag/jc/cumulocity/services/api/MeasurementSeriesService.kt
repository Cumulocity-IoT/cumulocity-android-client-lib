package com.softwareag.jc.cumulocity.services.api

import com.softwareag.jc.common.api.ConnectionRequest
import com.softwareag.jc.common.api.RequestResponder
import com.softwareag.jc.common.kotlin.extensions.DateTools.Companion.dateToISO861
import com.softwareag.jc.cumulocity.services.api.MeasurementsService.AggregateType
import com.softwareag.jc.cumulocity.services.models.ManagedObject
import com.softwareag.jc.cumulocity.services.models.Measurement
import com.softwareag.jc.cumulocity.services.models.MeasurementSeries
import com.softwareag.jc.cumulocity.services.models.User
import org.json.JSONObject
import java.net.URLEncoder
import java.util.*

const val C8Y_MEASUREMENTS_API_GET_SERIES = "/series?source=<SOURCE>&series=<SERIES>&revert=<REVERT>&dateFrom=<START>&dateTo=<END>&aggregationType=<AGGREGRATION_TYPE>"

/**
 * Access point for retrieving measurements collected over a period of time from Cumulocity, data represented as
 * [MeasurementSeries] and accessed via API endpoint /measurement/measurements/series
 *
 * Measurements series are collated differently to measurements, the advantage being that the format
 * is more compact and easier to represent than [Measurement]. However you need to know the full
 * namespace of the measurement series to retrieve in advance
 *
 * @property connection Connection referencing cumulocity tenant, instance and credentials to use
 * @constructor Creates a single use instance that cab be used to launch a query, do not reuse the same
 * instance for multiple queries
 **/
class MeasurementSeriesService(override val connection: CumulocityConnectionFactory.CumulocityConnection) : ConnectionRequest<User, MeasurementSeries>(connection) {

    private var _ref: String? = null
    private var _type: String? = null
    private var _series: String? = null
    private var _from: Date? = null
    private var _to: Date? = null
    private var _revert: Boolean = true

    private var _aggregateType: MeasurementsService.AggregateType? = null

    /**
     * Returns a list of [Measurement] generated by the asset for the given id parameter.
     *
     * @param id internal id of the [ManagedObject] that is the source of measurements to be returned
     * @param series label of the measurement to be retrieved
     * @param from Date and time to search from
     * @param to Data nd time to search upto (use Date() to specify up to now)
     * @param agggregrationType Limits the number of responses by grouping them into the specified time interval [AggregateType]
     * @param reverseDateOrder if false results are ordered date descending, specify true (default) for the opposite i.e.
     * the last measurement will be first in the list
     * @param responder callback function which will be called with the results
     */
    fun get(id: String, series: String, from: Date, to: Date, aggregrationType: MeasurementsService.AggregateType, responder: RequestResponder<MeasurementSeries>) {

        _ref = id
        _from = from
        _to = to
        _series = series
        _aggregateType = aggregrationType

        super.execute(responder)
    }

    protected override fun path(): String {

         if (_series != null) {
            return "$C8Y_MEASUREMENTS_API$C8Y_MEASUREMENTS_API_GET_SERIES"
                .replace("<SOURCE>", _ref!!)
                .replace("<START>", URLEncoder.encode(_from.dateToISO861(), "UTF8"))
                .replace("<END>", URLEncoder.encode(_to.dateToISO861(), "UTF8"))
                .replace("<SERIES>", _series!!)
                .replace("<AGGREGRATION_TYPE>", _aggregateType.toString())
                .replace("<REVERT>", _revert.toString())
        } else {
            throw RuntimeException("Null series given to request")
        }
    }

    protected override fun response(response: String): MeasurementSeries {

        return MeasurementSeries(JSONObject(response))
    }
}